@page "/skiasharp"

@using BlazorApp1.Helpers
@using SkiaSharp
@using SkiaSharp.Views.Blazor
@using System.Drawing
<h3>SkPage</h3>

<div class="container">
    <div class="row">
        <div class="col border rounded p-2 canvas-container">

            <SKCanvasView  style="width:1000px; height:800px" 
                @ref="skiaView" OnPaintSurface="OnPaintSurface" IgnorePixelScaling="true"
                @onpointerdown=" OnPointerDown"
                @onpointermove="OnPointerMove"
                @onpointerup="OnPointerUp" 
                @onpointercancel = "OnPointerCancel"
                />

        </div>
    </div>
</div>

@code {

    SKCanvasView skiaView = null!;
    SKPoint? touchLocation;
    [Inject] IJSRuntime JS { get; set; } = null!;
    Dictionary<long, FingerPaintPolyline> inProgressPolylines = new Dictionary<long, FingerPaintPolyline>();
    List<FingerPaintPolyline> completedPolylines = new List<FingerPaintPolyline>();

    SKPaint paint = new SKPaint
           {
                Style = SKPaintStyle.Stroke,
                IsAntialias = true,
                StrokeCap = SKStrokeCap.Round,
                StrokeJoin = SKStrokeJoin.Round
               };

    void OnPaintSurface(SKPaintSurfaceEventArgs args)
    {


        SKCanvas canvas = args.Surface.Canvas;

        canvas.Clear();
        foreach (FingerPaintPolyline polyline in completedPolylines)
        {
            paint.Color = SKColors.Black;
            paint.StrokeWidth = 2;
            canvas.DrawPath(polyline.Path, paint);


        }

        foreach (FingerPaintPolyline polyline in inProgressPolylines.Values)
        {
            paint.Color = SKColors.Black;
            paint.StrokeWidth = 2;
            canvas.DrawPath(polyline.Path, paint);
        }

      
    }



    void OnPointerDown(PointerEventArgs e)
    {

        if (!inProgressPolylines.ContainsKey(e.PointerId))
        {
            FingerPaintPolyline polyline = new FingerPaintPolyline
            {

            };
            polyline.Path.MoveTo(new SKPoint((float)e.OffsetX, (float)e.OffsetY));
            inProgressPolylines.Add(e.PointerId, polyline);
            skiaView.Invalidate();
        }



    }

    void OnPointerMove(PointerEventArgs e)
    {
        if (inProgressPolylines.ContainsKey(e.PointerId))
        {
            FingerPaintPolyline polyline = inProgressPolylines[e.PointerId];
            polyline.Path.LineTo(new SKPoint((float)e.OffsetX, (float)e.OffsetY));
            skiaView.Invalidate();
        }


    }

    void OnPointerUp(PointerEventArgs e)
    {
        if (inProgressPolylines.ContainsKey(e.PointerId))
        {
            completedPolylines.Add(inProgressPolylines[e.PointerId]);
            inProgressPolylines.Remove(e.PointerId);
            skiaView.Invalidate();
        }

    }

    void OnPointerCancel(PointerEventArgs e)
    {
         if (inProgressPolylines.ContainsKey(e.PointerId))
         {
             inProgressPolylines.Remove(e.PointerId);
            skiaView.Invalidate();
         }
                            
    }

}